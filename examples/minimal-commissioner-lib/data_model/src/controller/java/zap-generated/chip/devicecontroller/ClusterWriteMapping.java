/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.InteractionInfo;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterWriteMapping {
  public Map<String, Map<String, InteractionInfo>> getWriteAttributeMap() {
    Map<String, Map<String, InteractionInfo>> writeAttributeMap = new HashMap<>();
    Map<String, InteractionInfo> writeIdentifyInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeIdentifyIdentifyTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo identifyidentifyTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeIdentifyIdentifyTimeCommandParams.put("value", identifyidentifyTimeCommandParameterInfo);
    InteractionInfo writeIdentifyIdentifyTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .writeIdentifyTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeIdentifyIdentifyTimeCommandParams);
    writeIdentifyInteractionInfo.put(
        "writeIdentifyTimeAttribute", writeIdentifyIdentifyTimeAttributeInteractionInfo);
    writeAttributeMap.put("identify", writeIdentifyInteractionInfo);
    Map<String, InteractionInfo> writeDescriptorInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("descriptor", writeDescriptorInteractionInfo);
    Map<String, InteractionInfo> writeAccessControlInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("accessControl", writeAccessControlInteractionInfo);
    Map<String, InteractionInfo> writeBasicInformationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBasicInformationNodeLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basicInformationnodeLabelCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicInformationNodeLabelCommandParams.put(
        "value", basicInformationnodeLabelCommandParameterInfo);
    InteractionInfo writeBasicInformationNodeLabelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicInformationCluster) cluster)
                  .writeNodeLabelAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicInformationNodeLabelCommandParams);
    writeBasicInformationInteractionInfo.put(
        "writeNodeLabelAttribute", writeBasicInformationNodeLabelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicInformationLocationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basicInformationlocationCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicInformationLocationCommandParams.put(
        "value", basicInformationlocationCommandParameterInfo);
    InteractionInfo writeBasicInformationLocationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicInformationCluster) cluster)
                  .writeLocationAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicInformationLocationCommandParams);
    writeBasicInformationInteractionInfo.put(
        "writeLocationAttribute", writeBasicInformationLocationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicInformationLocalConfigDisabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basicInformationlocalConfigDisabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBasicInformationLocalConfigDisabledCommandParams.put(
        "value", basicInformationlocalConfigDisabledCommandParameterInfo);
    InteractionInfo writeBasicInformationLocalConfigDisabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicInformationCluster) cluster)
                  .writeLocalConfigDisabledAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicInformationLocalConfigDisabledCommandParams);
    writeBasicInformationInteractionInfo.put(
        "writeLocalConfigDisabledAttribute",
        writeBasicInformationLocalConfigDisabledAttributeInteractionInfo);
    writeAttributeMap.put("basicInformation", writeBasicInformationInteractionInfo);
    Map<String, InteractionInfo> writeLocalizationConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeLocalizationConfigurationActiveLocaleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo localizationConfigurationactiveLocaleCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeLocalizationConfigurationActiveLocaleCommandParams.put(
        "value", localizationConfigurationactiveLocaleCommandParameterInfo);
    InteractionInfo writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LocalizationConfigurationCluster) cluster)
                  .writeActiveLocaleAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLocalizationConfigurationActiveLocaleCommandParams);
    writeLocalizationConfigurationInteractionInfo.put(
        "writeActiveLocaleAttribute",
        writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo);
    writeAttributeMap.put(
        "localizationConfiguration", writeLocalizationConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeGeneralCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeGeneralCommissioningBreadcrumbCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo generalCommissioningbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeGeneralCommissioningBreadcrumbCommandParams.put(
        "value", generalCommissioningbreadcrumbCommandParameterInfo);
    InteractionInfo writeGeneralCommissioningBreadcrumbAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .writeBreadcrumbAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeGeneralCommissioningBreadcrumbCommandParams);
    writeGeneralCommissioningInteractionInfo.put(
        "writeBreadcrumbAttribute", writeGeneralCommissioningBreadcrumbAttributeInteractionInfo);
    writeAttributeMap.put("generalCommissioning", writeGeneralCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeNetworkCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeNetworkCommissioningInterfaceEnabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioninginterfaceEnabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeNetworkCommissioningInterfaceEnabledCommandParams.put(
        "value", networkCommissioninginterfaceEnabledCommandParameterInfo);
    InteractionInfo writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .writeInterfaceEnabledAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeNetworkCommissioningInterfaceEnabledCommandParams);
    writeNetworkCommissioningInteractionInfo.put(
        "writeInterfaceEnabledAttribute",
        writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo);
    writeAttributeMap.put("networkCommissioning", writeNetworkCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeAdministratorCommissioningInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "administratorCommissioning", writeAdministratorCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeOperationalCredentialsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("operationalCredentials", writeOperationalCredentialsInteractionInfo);
    return writeAttributeMap;
  }
}
